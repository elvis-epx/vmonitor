#!/usr/bin/python3

#####################################################################

import time, sys, os, datetime, hmac, random, configparser
from myeventloop import Log, background
from myeventloop.udpserver import *

config = {}

def _gen_packet(link, key, challenge, response):
    our_time = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S")
    data = ("%d %s %s %s " % (link, our_time, challenge, response)).encode('ascii')
    mac = hmac.new(key, msg=data, digestmod='sha256')
    data += mac.hexdigest()[0:16].encode('ascii')
    return data

def gen_packet(link, challenge, response):
    return _gen_packet(link, config["secret"], challenge, response)

def _parse_packet(data, key):
    data = data.decode('ascii', errors='ignore').split(" ")
    if len(data) != 5:
        Log.debug("Invalid packet format")
        return None
    link, their_time, challenge, response, hexmac = data
    if link not in ("1", "2"):
        Log.debug("Link number")
        return None
    tmp = ("%s %s %s %s " % (link, their_time, challenge, response)).encode('ascii')
    mac = hmac.new(key, msg=tmp, digestmod='sha256')
    exp_hexmac = mac.hexdigest()[0:16]
    if exp_hexmac != hexmac:
        Log.debug("Inconsistent HMAC")
        return None 
    try:
        their_time = datetime.datetime.strptime(their_time, "%Y-%m-%dT%H:%M:%S")
    except ValueError:
        Log.debug("Invalid date/time")
        return None 
    diff = datetime.datetime.utcnow() - their_time
    if abs(diff.seconds) > 120:
        Log.debug("Skewed date/time")
        return None 
    return int(link), challenge, response

def parse_packet(data):
    return _parse_packet(data, config["secret"])

def do_script(status):
    if status == "undefined":
        Log.error("Cannot run script in undefined state")
        return

    script = {"LINK1_LINK2": config["link1_link2_script"], "LINK1": config["link1_script"], \
          "LINK2": config["link2_script"], "NOLINK": config["nolink_script"]}[status]
    if script != "None":
        Log.info("Running script %s " % script)
        os.system(script)


class TratadorDatagrama(UDPServerHandler):
    def __init__(self, observer, addr, link):
        self.observer = observer
        self.link = link
        super().__init__(addr, "link%d" % link)

    def recv_callback(self, addr, dgram):
        Log.debug("Received %s" % dgram)
        self.observer.recv_callback(self.link, addr, dgram)


class MyEventLoop(UDPServerEventLoop):
    def __init__(self, observer):
        super().__init__()
        self.observer = observer

    def before_select(self, crd, cwr, cex, next_to, to_label):
        self.observer.before_select(crd, cwr, cex, next_to, to_label)


class vmonitor:
    def __init__(self, config):
        self.config = config
        self.our_challenge = [None, "None", "None"]
        self.their_challenge = [None, "None", "None"]
        self.status = "undefined"

        if config["persona"] == "client":
            self.peer_fixed = True
            self.peer = [None, self.config["link1_server"], self.config["link2_server"]]
        else:
            # Client may be behind a NAT
            self.peer_fixed = False
            self.peer = [None, None, None]

        hb = Timeout.new("heartbeat", config["heartbeat"], self.heartbeat_cb)
        if config["hard_heartbeat"] > 0:
            self.hard_heartbeat = Timeout.new("hard_heartbeat", config["hard_heartbeat"], self.hard_heartbeat_cb)
        else:
            self.hard_heartbeat = None
        self.pingtime = Timeout.new("ping", 5, self.pingtime_cb)
        self.hysteresis = Timeout.new("hysteresis", config["initial_hysteresis"], self.handle_link_change)

        p1 = Timeout.new("plinkto1", config["timeout"], self.handle_link_change)
        p2 = Timeout.new("plinkto2", config["timeout"], self.handle_link_change)
        c1 = Timeout.new("clinkto1", config["ctimeout"], self.handle_link_change)
        c2 = Timeout.new("clinkto2", config["ctimeout"], self.handle_link_change)

        self.plink_timeout = [None, p1, p2]
        self.clink_timeout = [None, c1, c2]

        t1 = TratadorDatagrama(self, self.config["link1_%s" % self.config["persona"]], 1)
        t2 = TratadorDatagrama(self, self.config["link2_%s" % self.config["persona"]], 2)

        self.handlers = [t1, t2]

    def heartbeat_cb(self, to_obj):
        Log.info("Heartbeat")
        to_obj.restart()

    def hard_heartbeat_cb(self, _):
        Log.info("Hard heartbeat")
        do_script(self.status)
        self.hard_heartbeat.restart()

    def ping(self, link):
        if not self.peer[link]:
            Log.info("Peer %d unknown" % link)
            return

        if self.our_challenge[link] == "None":
            self.our_challenge[link] = "%x" % random.randint(10, 0xffffffff)

        challenge = self.our_challenge[link]
        response = self.their_challenge[link]
        data = gen_packet(link, challenge, response)

        self.handlers[link-1].sendto(self.peer[link], data)
        Log.debug("Link %d sent %s" % (link, data))

    def pingtime_cb(self, to_obj):
        for link in (1, 2):
            self.ping(link)

        to = self.config["pingavg"] + \
             self.config["pingvar"] * 2 * (random.random() - 0.5)

        to_obj.reset(to)

    def handle_link_change(self, _):
        if self.hysteresis.alive():
            return    

        link1_up = self.plink_timeout[1].alive() and self.clink_timeout[1].alive()
        link1_up = link1_up and 1 or 0
        link2_up = self.plink_timeout[2].alive() and self.clink_timeout[2].alive()
        link2_up = link2_up and 2 or 0
        to = link1_up + link2_up

        newstatus = ["NOLINK", "LINK1", "LINK2", "LINK1_LINK2"][to]

        if newstatus == self.status:
            return

        self.status = newstatus
        Log.warn("New status: %s" % self.status)
        do_script(self.status)
        self.hysteresis.reset(self.config["hysteresis"])
        if self.hard_heartbeat:
            self.hard_heartbeat.restart()

    def run(self):
        eventloop = MyEventLoop(self)
        eventloop.loop()

    def before_select(self, crd, cwr, cex, next_to, to_label):
        Log.debug("Status %s to1 %d/%d to2 %d/%d hys %d ping %d next %d" % \
            (self.status,
            self.plink_timeout[1].remaining(), self.clink_timeout[1].remaining(),
            self.plink_timeout[2].remaining(), self.clink_timeout[2].remaining(),
            self.hysteresis.remaining(), self.pingtime.remaining(), next_to))

    def recv_callback(self, recv_link, addr, data):
        info = parse_packet(data)
        if not info:
            Log.debug("Corrupted packet")
            return
        link, challenge, response = info
    
        if link != recv_link:
            Log.error("Packet for link %d came via link %d" % (link, recv_link))
            return
    
        self.plink_timeout[link].restart()

        if not self.peer_fixed and self.peer[link] != addr:
            self.peer[link] = addr
            Log.info("Peer %d = %s" % (link, str(self.peer[link])))
    
        self.their_challenge[link] = challenge

        if self.our_challenge[link] == "None":
            Log.debug("Not evaluating response %s" % response)
            pass

        elif response == self.our_challenge[link]:
            Log.debug("Good response %s" % response)
            self.clink_timeout[link].restart()
            self.our_challenge[link] = "None"
        else:
            Log.debug("Wrong response exp %s got %s" % \
                (response, self.our_challenge[link]))
    
        self.handle_link_change(None)


def usage():
    print("Uso: vmonitor <config file> client|server [daemon]")
    sys.exit(1)

def prechk(item, cfg):
    if item not in cfg:
        print("%s must be in config (None=no value)" % item)
        usage()

def prechki(item, cfg):
    if item not in cfg:
        print("%s must be in config as an integer value" % item)
        usage()

def parsecfgaddr(item, cfg):
    if item not in cfg:
        print("%s must be in config as addr:port" % item)
        usage()
    ap = cfg[item].split(':')
    if len(ap) != 2:
        print("%s must be in config as addr:port" % item)
        usage()
    try:
        addr, port = ap[0], int(ap[1])
    except ValueError:
        print("%s must be in config as addr:port" % item)
        usage()
    if port <= 0 or port >= 65535 or not addr:
        print("%s must be in config as addr:port" % item)
        usage()
    return (addr, port)

def parse_config():
    if len(sys.argv) < 3:
        usage()

    config = {}
    persona = sys.argv[2]

    if persona not in ('client', 'server'):
        usage()
    config['persona'] = persona

    config['daemon'] = 0
    if len(sys.argv) > 3:
        config['daemon'] = (sys.argv[3] == "daemon")

    cfgfile = configparser.ConfigParser()
    cfgfile.read(sys.argv[1])
    if 'vmonitor' not in cfgfile:
        usage()
    cfg = cfgfile['vmonitor']

    if 'secret' not in cfg:
        usage()
    config['secret'] = cfg['secret'].encode('utf-8')
    if len(config['secret']) < 10:
        print("Secret in configuration must have at least 10 characters")
        usage()

    for name in ('mailfrom', 'mailto', 'logfile', 'link1_link2_script', 'link1_script', \
        'link2_script', 'nolink_script'):
        prechk(name, cfg)
        config[name] = cfg[name]

    if config['mailfrom'] != config['mailto'] and 'None' in (config['mailfrom'], config['mailto']):
        print("If either of mailfrom or mailto is None, both must be None")
        usage()
    
    for name in ('pingavg', 'timeout', 'ctimeout', 'heartbeat'):
        prechki(name, cfg)
        try:
            config[name] = int(cfg[name])
        except ValueError:
            print("Config %s should be an integer value" % name)
            usage()
        if config[name] <= 0:
            print("Config %s should be a positive integer value" % name)
            usage()

    for name in ('hysteresis', 'initial_hysteresis', 'hard_heartbeat'):
        prechki(name, cfg)
        try:
            config[name] = int(cfg[name])
        except ValueError:
            print("Config %s should be an integer value" % name)
            usage()
        if config[name] < 0:
            print("Config %s should be a non-negative integer value" % name)
            usage()

    for name in ('pingvar', 'loglevel', 'maillevel'):
        prechki(name, cfg)
        try:
            config[name] = int(cfg[name])
        except ValueError:
            print("Config %s should be an integer value" % name)
            usage()
        if config[name] < 0:
            print("Config %s should be a non-negative integer value" % name)
            usage()

    if config['pingavg'] <= config['pingvar']:
        print("pingavg time must be larger than pingvar")
        usage()
        
    if (config['pingavg'] + config['pingvar'] + 1) >= config['timeout']:
        print("pingavg + pingvar + 1 should be less than link timeout")
        usage()
    
    if config['ctimeout'] <= config['timeout']:
        print("Challenge timeout (ctimeout) should be bigger than timeout")
        usage()
    
    if config['hysteresis'] <= config['timeout']:
        print("Hysteresis should be bigger than link timeout")
        usage()

    for name in ('link1_server', 'link2_server', 'link1_client', 'link2_client'):
        config[name] = parsecfgaddr(name, cfg)

    if config['link1_server'] == config['link2_server'] or \
            config['link1_client'] == config['link2_client'] or \
            config['link1_client'] == config['link1_server'] or \
            config['link1_client'] == config['link2_server'] or \
            config['link2_client'] == config['link1_server'] or \
            config['link2_client'] == config['link2_server']:
        print("Link 1 address:port must be different from Link 2 pair")
        print("both at client and server side.")
        usage()

    return config

if __name__ == '__main__':
    config = parse_config()

    Log.set_level(config['loglevel'])
    Log.set_mail(config['maillevel'], config['mailfrom'], config['mailto'])

    if config["daemon"]:
        background()

    Log.info("vmonitor, persona = %s" % config["persona"])

    vmonitor(config).run()
